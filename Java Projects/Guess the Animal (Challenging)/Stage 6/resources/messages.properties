# The program uses the java.text.MessageFormat class to format messages.
# For correct message formatting, see the documentation for this class.
# https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/text/MessageFormat.html
#
# Please note, that the apostrophe (') is special symbol and you should double it or use alternative symbol (’)
#
# The program supports variability of messages. Use symbol '\f' (form feed) to separate them.
#

fileName = animals.
welcome = Welcome to the animal’s expert system!

# Greetings

# General greetings. Can be used at any time.

greeting=\
    Hi!\f\
    Hello!\f\
    Hey!\f\
    Hey man!\f\
    Long time no see!\f\
    It''s been a while!\f\
    Good to see you!\f\
    Nice to see you!\f\
    Yo!\f\
    Howdy!\f\
    G''day mate!\f\
    Hiya!


# Time specific greetings.

greeting.morning        = Good morning!
greeting.afternoon      = Good afternoon!
greeting.evening        = Good evening!
greeting.night          = Hi Night Owl!
greeting.early          = Hi Early Bird!

#
# You can copy and change these properties for other languages.
# You can add any other time intervals. Time periods can overlap.
# Time intervals for each time/date are specified in the format:
#
#  <period>.time.after  = HH:MM
#  <period>.time.before = HH:MM
#  or/and
#  <period>.date.after  = MM-DD
#  <period>.date.before = MM-DD
#  <period>.date.equals = MM-DD
#

morning.time.after      = 05:00
morning.time.before     = 12:00
afternoon.time.after    = 12:00
afternoon.time.before   = 18:00
evening.time.after      = 18:00
night.time.before       = 03:00
early.time.after        = 03:00
early.time.before       = 05:00

christmas.date.after    = 12-20
christmas.date.before   = 12-26

# Random farewell.

farewell=\
    Bye!\f\
    Bye, bye!\f\
    See you later!\f\
    See you soon!\f\
    Talk to you later!\f\
    I’m off!\f\
    It was nice seeing you!\f\
    See ya!\f\
    See you later, alligator!\f\
    In a while, crocodile!\f\
    Hasta la vista, baby!\f\
    Adios, amigos!\f\
    Au revoir!\f\
    Adieu!\f\
    Have a nice one!

# Ask user again for a closed (Yes/No) question

ask.again=\
    Come on, yes or no?\f\
    Please enter yes or no.\f\
    Funny, I still don’t understand, is it yes or no?\f\
    Sorry, it must be yes or no.\f\
    Let’s try again: yes or no?\f\
    I’m not sure I caught you: was it yes or no?\f\
    Oh, it’s too complicated for me: just say me yes or no.\f\
    I’m filling a bit intrigued: just say yes or no.\f\
    I am a bit confused, give me a simple answer: yes or no\f\
    Oh, no, don’t try to confuse me: say yes or no.\f\
    Could you please simply say yes or no?\f\
    Sorry, may I ask you again: was it yes or no?

# Ask for a favourite animal

animal.wantLearn    = I want to learn about animals.
animal.askFavorite  = Which animal do you like most?
animal.nice         = Nice!\fGreat!\fWonderful!\fAwesome!\fExcellent!\fMarvelous!
animal.learnedMuch  =\ I’ve learned so much about animals!

# The properties used for method ask("<key>")

animal.prompt       = Enter the animal:
animal.error        =\
    The animal should be entered in the following format:\n\
    a/an + name of the animal, for example, “an elephant”.

statement.prompt    =\
    Specify a fact that distinguishes {0} from {1}.\n\
    The sentence should be of the format: 'It can/has/is ...'.

statement.error     = The examples of a statement:\n\
                       - It can fly \n\
                       - It has horns \n\
                       - It is a mammal

# The Guessing Game

game.letsPlay       = Let’s play a game!
game.think          = You think of an animal, and I guess it.
game.enter          = Press enter when you’re ready.
game.win            = It''s great that I got it right!\f\
    I didn’t even hope that it would be possible to guess!

game.giveUp         = I give up. What animal do you have in mind?
game.isCorrect      = Is the statement correct for {0}?
game.learned        = I have learned the following facts about animals:
game.distinguish    = I can distinguish these animals by asking the question:

game.thanks=\
    That was funny! \f\
    It was nice to play with you! \f\
    It was a pleasure for me to know you better! \f\
    Thank you for playing! \f\
    Thank you! I had too much fun!

game.again=\
    Want to try again?\f\
    Would you like to play again?\f\
    Do you want to repeat?\f\
    Want to play again?\f\
    One more game?\f\
    Do you want to play again?

# Application Menu

# Menu properties
menu.property.title     = What do you want to do:
menu.property.exit      = Exit
menu.property.error     = Please enter the number from 0 up to {0}

# Menu items
menu.entry.play        = Play the guessing game
menu.entry.list        = List of all animals
menu.entry.search      = Search for an animal
menu.entry.delete      = Delete an animal
menu.entry.statistics  = Calculate statistics
menu.entry.print       = Print the Knowledge Tree

# Tree Services

# List of all animals
tree.list.animals   = Here are the animals (facts) I know:

# This property is format for printf method
tree.list.printf     =\ - %1$s (%2$d)%n

# Search an animal
tree.search.facts    = Facts about the {0}:
tree.search.noFacts  = No facts about the {0}.
# This property is format for printf method
tree.search.printf    =\ - %s%n

# Delete an animal
tree.delete.root        = Can’t delete the only animal from the root.
tree.delete.successful  = The {0} was deleted from the knowledge base.
tree.delete.fail        = The {0} was not found in the knowledge base.

# The Knowledge Tree Statistics
tree.stats.title        =The Knowledge Tree stats
tree.stats.root         =- root node                    {0}
tree.stats.nodes        =- total number of nodes        {0,number,integer}
tree.stats.animals      =- total number of animals      {0,number,integer}
tree.stats.statements   =- total number of statements   {0,number,integer}
tree.stats.height       =- height of the tree           {0,number,integer}
tree.stats.minimum      =- minimum depth                {0,number,integer}
tree.stats.average      =- average depth                {0,number,##0.0}

# Print the Knowledge Tree
tree.print.vertical     = │
tree.print.branch       = ├
tree.print.corner       = └

# This property is format for printf method
tree.print.printf       = %1$s%2$s %3$s%n
